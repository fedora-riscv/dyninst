--- dyninst-9.3.1/common/src/Types.h.sv	2017-03-07 22:05:52.187479600 -0500
+++ dyninst-9.3.1/common/src/Types.h	2017-03-07 22:06:57.509944790 -0500
@@ -170,7 +170,7 @@
 static const Address ADDR_NULL = (Address)(0);
 #else
 #define ADDR_NULL (0)
-typedef uintptr_t Address;
+typedef unsigned long Address;
 #endif
 /* Note the inherent assumption that the size of a "long" integer matches
    that of an address (void*) on every supported Paradyn/Dyninst system!


--- dyninst-9.3.1/common/h/dyntypes.h.sv	2017-03-08 10:16:18.657768231 -0500
+++ dyninst-9.3.1/common/h/dyntypes.h	2017-03-08 10:37:07.992634513 -0500
@@ -124,8 +124,8 @@
 
 namespace Dyninst
 {
-   typedef uintptr_t Address;
-   typedef uintptr_t Offset;
+   typedef unsigned long Address;   
+   typedef unsigned long Offset;
 
 #if defined(_MSC_VER)
    typedef int PID;


--- dyninst-9.3.1/dyninstAPI/src/BPatch_memoryAccess.C.sv	2017-03-07 23:07:29.371789000 -0500
+++ dyninst-9.3.1/dyninstAPI/src/BPatch_memoryAccess.C	2017-03-07 23:07:48.928927991 -0500
@@ -33,10 +33,10 @@
 #include <stdlib.h>
 #include <string.h>
 
+#include "../../common/src/Types.h"
 #include "BPatch_memoryAccess_NP.h"
 #include "BPatch_Vector.h"
 #include "BPatch_point.h"
-#include "../../common/src/Types.h"
 
 BPatch_addrSpec_NP::BPatch_addrSpec_NP(long _imm, int _ra, int _rb, int _scale) :
    imm(_imm), 


--- dyninst-9.3.1/dyninstAPI/h/BPatch_instruction.h.sv	2017-03-08 09:06:46.638171175 -0500
+++ dyninst-9.3.1/dyninstAPI/h/BPatch_instruction.h	2017-03-08 09:00:39.455564403 -0500
@@ -69,7 +69,7 @@
  public:
 
   BPatch_instruction(internal_instruction *insn,
-	  uintptr_t _addr);
+	  Dyninst::Address _addr);
   virtual ~BPatch_instruction();
 
   void getInstruction(const unsigned char *&_buffer, unsigned char &_length);


--- dyninst-9.3.1/dyninstAPI/h/BPatch_memoryAccess_NP.h.sv	2017-03-07 22:43:56.645745821 -0500
+++ dyninst-9.3.1/dyninstAPI/h/BPatch_memoryAccess_NP.h	2017-03-08 10:39:30.122643332 -0500
@@ -121,27 +121,27 @@
   static BPatch_memoryAccess* init_tables();
 
   // initializes only the first access; #bytes is a constant
-  BPatch_memoryAccess(internal_instruction *, uintptr_t _addr,
+  BPatch_memoryAccess(internal_instruction *, Dyninst::Address _addr,
 		      bool _isLoad, bool _isStore, unsigned int _bytes,
 		      long _imm, int _ra, int _rb, unsigned int _scale = 0,
 		      int _cond = -1, bool _nt = false);
 
   // initializes only the first access; #bytes is an expression w/scale
-  BPatch_memoryAccess(internal_instruction *insn, uintptr_t _addr,
+  BPatch_memoryAccess(internal_instruction *insn, Dyninst::Address _addr,
                       bool _isinternal_Load, bool _isStore,
                       long _imm_s, int _ra_s, int _rb_s, unsigned int _scale_s,
                       long _imm_c, int _ra_c, int _rb_c, unsigned int _scale_c,
                       int _cond, bool _nt, int _preFcn = -1);
 
   // initializes only the first access; #bytes is an expression
-  BPatch_memoryAccess(internal_instruction *insn, uintptr_t _addr,
+  BPatch_memoryAccess(internal_instruction *insn, Dyninst::Address _addr,
 		      bool _isLoad, bool _isStore, bool _isPrefetch,
 		      long _imm_s, int _ra_s, int _rb_s,
 		      long _imm_c, int _ra_c, int _rb_c,
 		      unsigned short _preFcn);
 
   // initializes only the first access; #bytes is an expression & not a prefetch
-  BPatch_memoryAccess(internal_instruction *insn, uintptr_t _addr,
+  BPatch_memoryAccess(internal_instruction *insn, Dyninst::Address _addr,
 		      bool _isLoad, bool _isStore, long _imm_s, int _ra_s, int _rb_s,
 		      long _imm_c, int _ra_c, int _rb_c);
 
@@ -156,14 +156,14 @@
               int _cond, bool _nt);
 
   // initializes both accesses; #bytes is a constant
-  BPatch_memoryAccess(internal_instruction *insn, uintptr_t _addr,
+  BPatch_memoryAccess(internal_instruction *insn, Dyninst::Address _addr,
                       bool _isLoad, bool _isStore, unsigned int _bytes,
                       long _imm, int _ra, int _rb, unsigned int _scale,
                       bool _isLoad2, bool _isStore2, unsigned int _bytes2,
                       long _imm2, int _ra2, int _rb2, unsigned int _scale2);
 
   // initializes both accesses; #bytes is an expression & not a prefetch
-  BPatch_memoryAccess(internal_instruction *insn, uintptr_t _addr, bool _isLoad, bool _isStore,
+  BPatch_memoryAccess(internal_instruction *insn, Dyninst::Address _addr, bool _isLoad, bool _isStore,
                       long _imm_s, int _ra_s, int _rb_s, unsigned int _scale_s,
                       long _imm_c, int _ra_c, int _rb_c, unsigned int _scale_c,
                       bool _isLoad2, bool _isStore2, long _imm2_s, int _ra2_s, 
